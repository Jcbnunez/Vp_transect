rownames(GENO.matrix.dt) <- seqGetData(genofile, "sample.id")
dim(GENO.matrix.dt)[2] -> totSNPs
dim(GENO.matrix.dt)[1] -> totInds
NAinds <- apply(GENO.matrix.dt, 1, function(x) sum(is.na(x)))/totSNPs
data.frame(
ind = names(NAinds),
perc = NAinds) ->
NAinds
NAinds %>%
ggplot(aes(
x=ind,
y=perc
)) +
geom_bar(stat = "identity")+
coord_flip()
median(NAinds$perc)
NAinds %>%
filter(perc < 0.75) %>%
.$ind -> keep_ind
keep_ind %>% length()
data.frame(
snp = colnames(GENO.matrix.dt),
perc = apply(GENO.matrix.dt, 2, function(x) sum(is.na(x)))) ->
NAsnps
hist(NAsnps$perc)
NAsnps %>%
filter(perc < 5) %>%
.$snp -> keep_snp
keep_snp %>% length()
8000/240000
NAsnps %>%
filter(perc < 55) %>%
.$snp -> keep_snp
length(keep_snp)/totSNPs
55/90
NAsnps %>%
filter(perc < 45) %>%
.$snp -> keep_snp
length(keep_snp)/totSNPs
length(keep_snp)
GENO.matrix.dt[
which(rownames(GENO.matrix.dt) %in% keep_ind),
which(colnames(GENO.matrix.dt) %in% keep_snp)
] -> GENO.matrix.dt.flt
dim(GENO.matrix.dt.flt)
GENO.matrix.dt.flt[1:10,1:10]
data.frame(
snp = colnames(GENO.matrix.dt),
perc = apply(GENO.matrix.dt, 2, function(x) sum(x/2))) ->
NA_AF
NA_AF
data.frame(
snp = colnames(GENO.matrix.dt),
perc = apply(GENO.matrix.dt, 2, function(x) sum(x/2, na.rm = T))) ->
NA_AF
NA_AF
max(NA_AF)
max(NA_AF$perc)
NA_AF$perc/96
hist(NA_AF$perc/96)
NA_AF
NA_AF
NA_AF$perc/96
NA_AF %>%
filter(perc/96 > 0.01) %>%
.$snp -> keep_snp_MAF
keep_snp_MAF
keep_snp_MAF %>% length()
NA_AF %>%
filter(perc/96 > 0.1) %>%
.$snp -> keep_snp_MAF
keep_snp_MAF %>% length()
keep_snp[keep_snp %in% keep_snp_MAF]
keep_snp_final = keep_snp[keep_snp %in% keep_snp_MAF]
keep_snp_final %>% length()
keep_snp %>% length()
NA_AF %>%
filter(perc/96 > 0.1) %>%
.$snp -> keep_snp_MAF
keep_snp_final = keep_snp[keep_snp %in% keep_snp_MAF]
GENO.matrix.dt[
which(rownames(GENO.matrix.dt) %in% keep_ind),
which(colnames(GENO.matrix.dt) %in% keep_snp_final)
] -> GENO.matrix.dt.flt
GENO.matrix.dt.flt[1:10,1:10]
dim(GENO.matrix.dt.flt)
imputePCA(GENO.matrix.dt.flt, scale = FALSE) %>%
.$completeObs ->
GENO.matrix.dt.flt.imp
GENO.matrix.dt.flt.imp
NAsnps %>%
filter(perc < 20) %>%
.$snp -> keep_snp
length(keep_snp)/totSNPs
length(keep_snp)
#### final filter
###
GENO.matrix.dt[
which(rownames(GENO.matrix.dt) %in% keep_ind),
which(colnames(GENO.matrix.dt) %in% keep_snp)
] -> GENO.matrix.dt.flt
GENO.matrix.dt.flt[1:10,1:10]
dim(GENO.matrix.dt.flt)
####
data.frame(
snp = colnames(GENO.matrix.dt),
perc = apply(GENO.matrix.dt, 2, function(x) sum(x/2, na.rm = T))) ->
NA_AF
NA_AF %>%
filter(perc/96 > 0.1) %>%
.$snp -> keep_snp_MAF
keep_snp_final = keep_snp[keep_snp %in% keep_snp_MAF]
GENO.matrix.dt[
which(rownames(GENO.matrix.dt) %in% keep_ind),
which(colnames(GENO.matrix.dt) %in% keep_snp_final)
] -> GENO.matrix.dt.flt
GENO.matrix.dt.flt[1:10,1:10]
dim(GENO.matrix.dt.flt)
imputePCA(GENO.matrix.dt.flt, scale = FALSE) %>%
.$completeObs ->
GENO.matrix.dt.flt.imp
dim(GENO.matrix.dt.flt.imp)
GENO.matrix.dt.flt.imp[1:10,1:10]
GENO.matrix.dt.flt.imp %>%
PCA(graph = F, ncp = 5) ->
pca.object.flt
#save(pca.object.05, file = "Vero.pca.object.05.Rdata")
pca.object.flt$ind$coord %>%
as.data.frame() %>%
mutate(sampleId = rownames(.))  ->
pca.meta.dim.flt
#### PLOT PCA
pca.meta.dim.flt %>%
separate(sampleId, remove = F, into = c("pop","sample"), sep = "_") %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
label = sampleId,
color = pop,
)) +
geom_point() +
geom_text(size = 1.7)
pca.meta.dim.flt %>% View
NAinds %>%
ggplot(aes(
x=ind,
y=perc
)) +
geom_bar(stat = "identity")+
coord_flip()
#### PLOT PCA
pca.meta.dim.flt %>%
separate(sampleId, remove = F, into = c("pop","sample"), sep = "_") %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
label = sampleId,
color = pop,
)) +
geom_point() +
geom_text(size = 1.7)
#### PLOT PCA
pca.meta.dim.flt %>%
separate(sampleId, remove = F, into = c("pop","sample"), sep = "_") %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
label = sampleId,
color = pop,
)) +
geom_point(size = 2.0) +
geom_text(size = 1.7)
pca.meta.dim.flt
pca.object.flt$ind$coord %>%
as.data.frame() %>%
mutate(sampleId = rownames(.)) %>%
left_join(samps) ->
pca.meta.dim.flt
pca.object.flt$ind$coord %>%
as.data.frame() %>%
mutate(sampleId = rownames(.)) %>%
left_join(samps.flt) ->
pca.meta.dim.flt
samps %>%
mutate(sampleid = paste(Site, ind, sep = "_")) %>%
filter(sampleid %in% rownames(GENO.matrix.dt.flt)) ->
samps.flt
samps.flt
pca.object.flt$ind$coord %>%
as.data.frame() %>%
mutate(sampleId = rownames(.)) %>%
left_join(samps.flt) ->
pca.meta.dim.flt
pca.object.flt$ind$coord %>%
as.data.frame() %>%
mutate(sampleid = rownames(.)) %>%
left_join(samps.flt) ->
pca.meta.dim.flt
rlang::last_trace()
pca.meta.dim.flt %>%
separate(sampleId, remove = F, into = c("pop","sample"), sep = "_") %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
#label = sampleId,
color = Transect_Type,
)) +
geom_point(size = 2.0)
pca.meta.dim.flt$Transect_Type
pca.meta.dim.flt %>%
separate(sampleId, remove = F, into = c("pop","sample"), sep = "_") %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
#label = sampleId,
color = Transect_Type,
)) +
geom_point(size = 2.0)
pca.meta.dim.flt %>%
ggplot(aes(
x=Dim.1,
y=Dim.2,
#label = sampleId,
color = Transect_Type,
)) +
geom_point(size = 2.0)
pca.meta.dim.flt %>% View
pca.meta.dim.flt %>%
ggplot(aes(
x=Transect_step,
y=Dim.1,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
ggplot(aes(
y=Transect_step,
x=Dim.1,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
ggplot(aes(
y=Transect_step,
x=Dim.2,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
filter(sampleid != "OG_F2") %>%
ggplot(aes(
y=Transect_step,
x=Dim.2,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
filter(sampleid != "OG_F2") %>%
ggplot(aes(
y=Transect_step,
x=Dim.1,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
filter(sampleid != "OG_F2") %>%
ggplot(aes(
x=Transect_step,
y=Dim.1,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
filter(sampleid != "OG_F2") %>%
ggplot(aes(
y=Transect_step,
x=Dim.2,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
pca.meta.dim.flt %>%
filter(sampleid != "OG_F2") %>%
ggplot(aes(
x=Transect_step,
y=Dim.2,
color = Transect_Type,
)) +
geom_point(size = 2.0) +
geom_smooth(method = "lm")
save(GENO.matrix.dt.flt.imp, file = "/Users/jcnunez/Library/CloudStorage/OneDrive-UniversityofVermont/Documents/GitHub/Vp_transect/data/GENO.matrix.dt.flt.imp.Rdata")
groups <- separate(data.frame(ind = row.names(GENO.matrix.dt.flt.imp)), ind, remove = F, into = c("pop","sample"), sep = "_")
groups
dapc(GENO.matrix.dt.flt.imp, groups$pop,
n.pca = 30, n.da=3 ) -> dapc.cal
optim.a.score(dapc.cal)
dapc(GENO.matrix.dt.flt.imp, groups$pop,
n.pca = optim.a.score(dapc.cal)$best,
n.da=3 ) -> dapc.cal.optim
scatter(dapc.cal.optim)
#paste(samps.flt$Transect_Type, samps.flt$Transect_step)
dapc.cal.optim$ind.coord %>%
as.data.frame() %>%
mutate(sampleid = rownames(.)) %>%
left_join(samps.flt) %>%
ggplot(aes(
x=LD1,
y=LD2,
col=Transect_Type,
label=Transect_step
#col=Transect_step
)) + #geom_point(size = 2.3) +
geom_text()
scatter(dapc.cal.optim)
dapc.cal.optim$ind.coord %>%
as.data.frame() %>%
mutate(sampleid = rownames(.)) %>%
left_join(samps.flt) %>%
ggplot(aes(
x=LD1,
y=Transect_step,
color=Transect_Type
)) + geom_point() +
geom_smooth(method = "lm")
scatter(dapc.cal.optim)
pca.meta.dim.flt %>%
ggplot(aes(
x=Dim.3,
y=Dim.4,
#label = sampleId,
color = Transect_Type,
)) +
geom_point(size = 2.0)
#Step 1: Let's create a function to calculate FST.
fst_calc = function( p1, p2 ){
q1=1-p1
q2=1-p2
Het1=2*p1*q1
Het2=2*p2*q2
Ht = 2*mean(c(p1,p2))*mean(c(q1, q2))
Hs = mean(Het1, Het2)
fst =abs(Ht - Hs)/Ht
return(fst)
}
#Step 1: Let's create a function to calculate FST.
fst_calc = function( p1, p2 ){
q1=1-p1
q2=1-p2
Het1=2*p1*q1
Het2=2*p2*q2
Ht = 2*mean(c(p1,p2))*mean(c(q1, q2))
Hs = mean(Het1, Het2)
fst =abs(Ht - Hs)/Ht
return(fst)
}
general_selection = function( p, sii, sij, sjj ){
q=1-p
num=(p^2)*(1-sii) + p*q*(1-sij)
dem=(p^2)*(1-sii) + 2*p*q*(1-sij) + (q^2)*(1-sjj)
p_t1 = num/dem
return(p_t1)
}
#Step 2: Let's create a simulation to understand Fst. First, letâ€™s create separate simulations for both habitats, as if they were independent
p=0.5
m=0.1 #set migration rate
#We will create two vectors for the recursive functions, one for each population
p1_recur=c()
p2_recur=c()
for(g in 1:100){
if(g==1){
p1_recur[g]=p
p2_recur[g]=p
} else{
#We will first code the action of selection on each population
p1_component = general_selection(p1_recur[g-1], sii=0.2, sij=0.05, sjj=0.0)
p2_component = general_selection(p2_recur[g-1], sii=0.0, sij=0.05, sjj=0.2)
p1_delta = p1_component - p1_recur[g-1]
p2_delta = p2_component - p2_recur[g-1]
p1_recur[g] = p1_recur[g-1] + p1_delta
p2_recur[g] = p2_recur[g-1] + p2_delta
} # close if-else
} # close g loop
sel_only = data.frame(g=1:100, p1_recur, p2_recur)
plot(NULL, xlim=c(1,100), ylim=c(0,1), ylab="Allele Freq", xlab="Generation")
cl <- rainbow(2)
lines(sel_only$g, sel_only$p1_recur,col = cl[1],type = 'l' )
lines(sel_only$g, sel_only$p2_recur,col = cl[2],type = 'l' )
fst_o=c()
for(g in 1:100){
tmp <- sel_only[which(sel_only$g == g),]
fst_o[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
migration_rate = function( m, p1, p2 ){
q= 1 -p
p_t1 = m*(p1-p2)
return(p_t1)
}
#Step 3: Let's now explore what happens when there is gene flow?
p=0.5
m=0.1 #set migration rate
#We will create two vectors for the recursive functions, one for each population
p1_recur=c()
p2_recur=c()
for(g in 1:100){
if(g==1){
p1_recur[g]=p
p2_recur[g]=p
} else{
#We will first code the action of selection on each population
p1_component = general_selection(p1_recur[g-1], sii=0.2, sij=0.05, sjj=0.0)
p2_component = general_selection(p2_recur[g-1], sii=0.0, sij=0.05, sjj=0.2)
p1_delta = p1_component - p1_recur[g-1]
p2_delta = p2_component - p2_recur[g-1]
#Now we will encode the migration effect
p1_mig_delta = migration_rate( m, p2_recur[g-1], p1_recur[g-1] )
p2_mig_delta = migration_rate( m, p1_recur[g-1], p2_recur[g-1] )
p1_recur[g] = p1_recur[g-1] + p1_delta + p1_mig_delta
p2_recur[g] = p2_recur[g-1] + p2_delta + p2_mig_delta
} # close if-else
} # close g loop
sel_mig = data.frame(g=1:100, p1_recur, p2_recur)
plot(NULL, xlim=c(1,100), ylim=c(0,1), ylab="Allele Freq", xlab="Generation")
cl <- rainbow(2)
lines(sel_mig$g, sel_mig$p1_recur,col = cl[1],type = 'l' )
lines(sel_mig$g, sel_mig$p2_recur,col = cl[2],type = 'l' )
fst_o_sel=c()
for(g in 1:100){
tmp <- sel_mig[which(sel_mig$g == g),]
fst_o_sel[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o_sel, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
#Step 4: Assessing the impacts of genetic drift on Fst. Lastly, we will simulate what happens when drift alone operates in the population. For simplicity, we will again assume that populations do not have gene flow. We will assume Ne = 100 for both populations.
Ne = 100
p = 0.5
drift_p_t1 = function( p, Ne ){
num=rbinom(1, Ne, p)
dem=Ne
p_t1 = num/dem
return(p_t1)
}
#We will create two vectors for the recursive functions, one for each population
p1_recur=c()
p2_recur=c()
for(g in 1:100){
if(g==1){
p1_recur[g]=p
p2_recur[g]=p
} else{
#We will first code the action of selection on each population
#Now we will encode the migration effect
p1_drift = drift_p_t1(p1_recur[g-1], Ne )
p1_delta = p1_drift - p1_recur[g-1]
p2_drift = drift_p_t1(p2_recur[g-1], Ne )
p2_delta = p2_drift - p2_recur[g-1]
p1_recur[g] = p1_recur[g-1] + p1_delta
p2_recur[g] = p2_recur[g-1] + p2_delta
} # close if-else
} # close g loop
drift_2_pops = data.frame(g=1:100, p1_recur, p2_recur)
plot(NULL, xlim=c(1,100), ylim=c(0,1), ylab="Allele Freq", xlab="Generation")
cl <- rainbow(2)
lines(drift_2_pops$g, drift_2_pops$p1_recur,col = cl[1],type = 'l' )
lines(drift_2_pops$g, drift_2_pops$p2_recur,col = cl[2],type = 'l' )
fst_o_drift=c()
for(g in 1:100){
tmp <- drift_2_pops[which(drift_2_pops$g == g),]
fst_o_drift[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o_drift, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
plot(1:100, fst_o_drift, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
fst_o=c()
fst_o=c()
for(g in 1:100){
tmp <- sel_only[which(sel_only$g == g),]
fst_o[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
migration_rate = function( m, p1, p2 ){
q= 1 -p
p_t1 = m*(p1-p2)
return(p_t1)
}
fst_o
fst_o[10]
fst_o[100]
fst_o_sel=c()
for(g in 1:100){
tmp <- sel_mig[which(sel_mig$g == g),]
fst_o_sel[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o_sel, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
fst_o_sel[10]
fst_o_sel[100]
plot(NULL, xlim=c(1,100), ylim=c(0,1), ylab="Allele Freq", xlab="Generation")
cl <- rainbow(2)
lines(drift_2_pops$g, drift_2_pops$p1_recur,col = cl[1],type = 'l' )
lines(drift_2_pops$g, drift_2_pops$p2_recur,col = cl[2],type = 'l' )
fst_o_drift=c()
for(g in 1:100){
tmp <- drift_2_pops[which(drift_2_pops$g == g),]
fst_o_drift[g]=fst_calc(tmp$p1_recur, tmp$p2_recur)
}
plot(1:100, fst_o_drift, type ='l',ylim=c(0,1), ylab="fst", xlab="Generation")
fst_o_drift[10]
fst_o_drift[100]
